/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package qa;

import java.io.File;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.attribute.FileAttribute;
import java.util.ArrayList;
import java.util.Arrays;

import org.apache.commons.lang3.CharUtils;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartUtils;
import org.jfree.chart.JFreeChart;
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;
import org.nd4j.linalg.api.buffer.DataType;
import org.nd4j.linalg.api.iter.NdIndexIterator;
import org.nd4j.linalg.api.ndarray.INDArray;
import org.nd4j.linalg.api.ops.random.impl.Range;
import org.nd4j.linalg.factory.Nd4j;
import org.nd4j.rng.NativeRandom;

import org.nd4j.linalg.api.rng.DefaultRandom;
import org.nd4j.linalg.api.rng.Random;
import org.nd4j.linalg.eigen.Eigen;

public class App {

    private static XYDataset createDataset(INDArray f) {
        final XYSeries data = new XYSeries("normal");
        for (int i = 0; i < f.length(); i++) {
            data.add(i, f.getDouble(i));
        }

        final XYSeriesCollection dataset = new XYSeriesCollection();
        dataset.addSeries(data);
        return dataset;
    }

    public static void main(String[] args) {
        final int N = 5;

        try {
            Files.createDirectories(Paths.get("./amp"));
        } catch (Exception e) {
            // TODO: handle exception
        }

        Random rand = Nd4j.getRandom();
        rand.setSeed(1042);
        INDArray E = Nd4j.randn(0.0, N / 2.0, new long[] { (long) Math.pow(2, N) }, rand);

        PlotChart gaussianChart = new PlotChart("Gaussian", "x", "y",
                PlotChart.createXYDataset(Nd4j.arange(0, (int) Math.pow(2, N)), E, new String[] { "E" }, true));
        gaussianChart.saveChartAsJPEG("gaussian.jpg", 800, 600);
        // gaussianChart.showChart();

        QuantumAnnealing quantumAnnealing = new QuantumAnnealing(N, E);

        INDArray H = null;
        double step = 0.1;
        INDArray time_steps = Nd4j.arange(0, quantumAnnealing.getTau() + step, step);
        INDArray eigenValues = Nd4j.zeros((int) Math.pow(2, N), time_steps.length());
        int eigenValuesIndex = 0;
        for (double t : time_steps.toDoubleVector()) {
            H = quantumAnnealing.create_tfim(t, H);
            INDArray eigenVectors = H.dup(); // deepcopy
            eigenValues.putColumn(eigenValuesIndex, Eigen.symmetricGeneralizedEigenvalues(eigenVectors));
            eigenValuesIndex += 1;

            INDArray amp = QuantumAnnealing.amp2prob(eigenVectors.getColumn(0, false));
            PlotChart probabilityDensityChart = new PlotChart("probabilityDensity", "x", "y",
                    PlotChart.createXYDataset(Nd4j.arange(0, amp.length()), amp, new String[] { "baseState" }, false));
            probabilityDensityChart.setYRange(0, 1);
            probabilityDensityChart.saveChartAsJPEG("./amp/amp" + String.format("%.2f", t) + ".jpg", 600, 400);

            if (t == quantumAnnealing.getTau()) {
                XYDataset dataset = PlotChart.createXYDataset(Nd4j.arange(0, amp.length()),
                        Nd4j.create(new double[][] { amp.toDoubleVector(), E.toDoubleVector() }),
                        new String[] { "probability", "E" }, true);
                PlotChart tauChart = new PlotChart("", "x", "y", dataset);
                tauChart.saveChartAsJPEG("tau_gaussian.jpg", 1000, 800);
            }
        }

        String eigenChartKeys[] = Arrays.stream(Nd4j.arange(0, eigenValues.rows()).toIntVector())
                .mapToObj(String::valueOf).toArray(String[]::new);

        System.out.println("time: " + time_steps.length() + " rowsValues: " + eigenValues.rows() + " columnValues: "
                + eigenValues.columns() + " Keys: " + eigenChartKeys.length);
        PlotChart eigenValueChart = new PlotChart("eigenValue", "t/Ï„", "E",
                PlotChart.createXYDataset(time_steps, eigenValues, eigenChartKeys, true));
        eigenValueChart.saveChartAsJPEG("eigenValue.jpg", 800, 600);
        // eigenValueChart.showChart();

    }
}